
# The run_simulations.py script will run all the suites specified under run
run:
    - rodinia_1.0_prebuilts

# The format is:
# suite_name:
#   exec_dir: <location of the executables, relative to the run_simulations.py script>
#   data_dir: <location of the directories containing benchmark data>
#   execs:
#       - <exec_name_1>:
#           - <commandline arg_list 1> # Leave blank if no arguments
#           - <commandline arg_list 2>
#           ...
#       - <exec_name_2>
#           ...
#       ...
# If you have a bunch of random benchmarks in random places, then a "suite" can be just one benchmark

# Rodinia 1.0 implemented with a pass/fail functional test
rodinia_1.0_prebuilts:
    exec_dir: "../../benchmarks/prebuilts/4.2/cuda/rodinia/1.0-ft/"
    data_dirs: "../../benchmarks/data_dirs/cuda/rodinia/1.0-ft/"
    execs:
        - BACKP-FT:
            - 4096 ./data/result-4096.txt
        - BFS2-FT:
            - ./data/graph4096.txt ./data/graph4096-result.txt
        - CFD-FT:
            - ./data/missile.domn.0.2M
        - HOTSP-FT:
            - 30 6 40 ./data/result_30_6_40.txt
        - HRTWL-FT:
            - ./data/test.avi 1 ./data/result-1.txt
        - KMN-FT:
            - -i data/400.txt -g data/400-result.txt -o
        - LIB-FT:
            -
        - LKYT-FT:
            - 1 ./data/testfile.avi 
        - LUD-FT:
            - -v -b -i ./data/64.dat
        - MGST-FT:
            -
        - NDL-FT:
            - 128 10 ./data/result_128_10.txt
        - NNC-FT:
            - ./data/filelist_4 3 30 90 ./data/filelist_4_3_30_90-result.txt
        - PATHF-FT:
            - 1000 20 5 ./data/result_1000_20_5.txt
        - SRAD-FT:
            - ./data/matrix128x128.txt 1 150 1 100 .5 2 ./data/result_matrix128x128_1_150_1_100_.5_2.txt
        - SS-FT:
            - 16 16
        - SSSP-FT:
            - ./data/graph4096.txt ./data/result-graph4096.txt
        - STMCL-FT:
            - 3 6 16 1024 1024 100 none output.txt 1 ./data/result_3_6_16_1024_1024_100_none_1.txt
